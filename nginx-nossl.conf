upstream gunicorn_server {
  # fail_timeout=0 means we always retry an upstream even if it failed
  # to return a good HTTP response (in case the Unicorn master nukes a
  # single worker for timing out).

  server unix:/PATH TO GUNCORN SOCK/gunicorn.sock fail_timeout=0;
}

server {
    server_name  www.EXAMPLE.COM;

    listen 80;
    
    rewrite ^(.*) https://EXAMPLE.COM$1 permanent;
}

server {
    server_name EXAMPLE.COM;

    listen 80;

    client_max_body_size 4G;

    access_log /var/log/nginx/django_EXAMPLE.access.log;
    error_log /var/log/nginx/django_EXAMPLE.error.log;

    ## Deny illegal Host headers
    if ($host !~* ^(EXAMPLE.COM|www.EXAMPLE.COM)$ ) {
        return 444;
    }

    location /static/ {
        autoindex off;
        expires 1y;
        access_log off;
        add_header Cache-Control public;
        alias   /var/www/static/;
    }

    location /media/ {
        autoindex off;
        expires 1y;
        access_log off;
        add_header Cache-Control public;
        alias   /var/www/media/;
    }

    location / {
        root /var/www/static/EXAMPLE.COM/documentroot;
        try_files $uri $uri @djangosite;

        expires max;
        access_log off;
        autoindex off;
    }

    location @djangosite {
        # an HTTP header important enough to have its own Wikipedia entry:
        #   http://en.wikipedia.org/wiki/X-Forwarded-For
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # enable this if and only if you use HTTPS, this helps Rack
        # set the proper protocol for doing redirects:
        # proxy_set_header X-Forwarded-Proto https;

        # pass the Host: header from the client right along so redirects
        # can be set properly within the Rack application
        #proxy_set_header Host $http_host;
        proxy_set_header Host $host;

        # we don't want nginx trying to do something clever with
        # redirects, we set the Host: header above already.
        proxy_redirect off;

        # set "proxy_buffering off" *only* for Rainbows! when doing
        # Comet/long-poll stuff.  It's also safe to set if you're
        # using only serving fast clients with Unicorn + nginx.
        # Otherwise you _want_ nginx to buffer responses to slow
        # clients, really.
        # proxy_buffering off;

        # Try to serve static files from nginx, no point in making an
        # *application* server like Unicorn/Rainbows! serve static files.
        if (!-f $request_filename) {
            proxy_pass http://gunicorn_server;
            break;
        }
    }

}